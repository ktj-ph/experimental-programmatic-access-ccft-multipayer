AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Metadata:
  AWS::ServerlessRepo::Application:
    Name: experimental-programmatic-access-ccft-multi-payer
    Description: This application automates the monthly extraction of new AWS Customer
      Carbon Footprint Tool for multiple account ID's
    Author: Katja Philipp
    LicenseUrl: s3://experimental-programmatic-access-ccft-multipayer-sar/8a8c86eb05582b8d50db705f2bc233c2
    ReadmeUrl: s3://experimental-programmatic-access-ccft-multipayer-sar/8413fcec9a4085d914339eb417876dd9
    SemanticVersion: 1.0.0
    HomePageUrl: https://github.com/ktj-ph/experimental-programmatic-access-ccft-multipayer
    SourceCodeUrl: https://github.com/ktj-ph/experimental-programmatic-access-ccft-multipayer
Description: 'ccft-sam-script

  SAM Template for ccft-sam-script

  '
Globals:
  Function:
    Timeout: 3
    MemorySize: 128
Parameters:
  CarbonEmissionsDataBucketName:
    Description: Name suffix (w/o prefixes for acct ID, region) for carbon emissions
      data bucket (will be created by this stack)
    Type: String
    Default: ccft-data
  AccountIDsBucketName:
    Description: Name suffix (w/o prefixes for acct ID, region) for account ID bucket
    Type: String
    Default: ccft-account-ids
  AccountIDFileName:
    Description: Name prefix for the .json file that holds the account IDs for which
      CCFT data is extracted
    Type: String
    Default: ccft-account-ids.json
  CarbonEmissionsDataFileName:
    Description: Name prefix for the .json file as output of the script
    Type: String
    Default: ccft-access.json
  CCFTRoleName:
    Description: Name of the IAM role that was deployed into all member accounts and
      gives read access to the AWS CCFT data
    Type: String
    Default: ccft-read-role
  GlueDatabaseName:
    Description: Name of the Glue database used for Athena (will be created by this
      stack)
    Type: String
    Default: carbon_emissions
Resources:
  CarbonEmissionsDataBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::Sub: ${AWS::AccountId}-${AWS::Region}-${CarbonEmissionsDataBucketName}
    Metadata:
      SamResourceId: CarbonEmissionsDataBucket
  AccountIDsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::Sub: ${AWS::AccountId}-${AWS::Region}-${AccountIDsBucketName}
    Metadata:
      SamResourceId: AccountIDsBucket
  AthenaResultBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::Sub: ${AWS::AccountId}-${AWS::Region}-athenaresults
      LifecycleConfiguration:
        Rules:
        - Id: DeleteAfterOneDay
          Status: Enabled
          ExpirationInDays: 1
    Metadata:
      SamResourceId: AthenaResultBucket
  ExtractCarbonEmissionsStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionUri:
        Bucket: experimental-programmatic-access-ccft-multipayer-sar
        Key: a02003a044608ed16ff536f9b7514382
      DefinitionSubstitutions:
        ExtractCarbonEmissionsFunctionArn:
          Fn::GetAtt:
          - ExtractCarbonEmissionsFunction
          - Arn
        GetAccountIDsFunctionArn:
          Fn::GetAtt:
          - GetAccountIDsFunction
          - Arn
        CreateAlterAthenaViewFunctionArn:
          Fn::GetAtt:
          - CreateAlterAthenaViewFunction
          - Arn
        CheckFirstInvocationFunctionArn:
          Fn::GetAtt:
          - CheckFirstInvocationFunction
          - Arn
        BackfillDataFunctionArn:
          Fn::GetAtt:
          - BackfillDataFunction
          - Arn
        CarbonEmissionsDataBucketArn:
          Fn::GetAtt:
          - CarbonEmissionsDataBucket
          - Arn
        CarbonEmissionsDataBucketName:
          Ref: CarbonEmissionsDataBucket
      Events:
        ComplexScheduleEvent:
          Type: ScheduleV2
          Properties:
            ScheduleExpression: cron(0 0 15 * ? *)
            FlexibleTimeWindow:
              Mode: FLEXIBLE
              MaximumWindowInMinutes: 60
      Policies:
      - LambdaInvokePolicy:
          FunctionName:
            Ref: ExtractCarbonEmissionsFunction
      - LambdaInvokePolicy:
          FunctionName:
            Ref: GetAccountIDsFunction
      - LambdaInvokePolicy:
          FunctionName:
            Ref: CreateAlterAthenaViewFunction
      - LambdaInvokePolicy:
          FunctionName:
            Ref: CheckFirstInvocationFunction
      - LambdaInvokePolicy:
          FunctionName:
            Ref: BackfillDataFunction
      - Statement:
        - Sid: AllowStartExecution
          Effect: Allow
          Action:
          - states:StartExecution
          Resource: '*'
    Metadata:
      SamResourceId: ExtractCarbonEmissionsStateMachine
  GetAccountIDsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: get-account-ids
      CodeUri: s3://experimental-programmatic-access-ccft-multipayer-sar/3c1d18d31cf081ab2e02a16b302cc96a
      Handler: get-account-ids.lambda_handler
      Policies:
      - S3ReadPolicy:
          BucketName:
            Ref: AccountIDsBucket
      Runtime: python3.11
      Architectures:
      - arm64
      Timeout: 20
      Environment:
        Variables:
          bucketName:
            Ref: AccountIDsBucket
          fileKey:
            Ref: AccountIDFileName
    Metadata:
      SamResourceId: GetAccountIDsFunction
  GetAccountIDsFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${GetAccountIDsFunction}
      RetentionInDays: 1
    Metadata:
      SamResourceId: GetAccountIDsFunctionLogGroup
  CheckFirstInvocationFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: check-first-invocation
      CodeUri: s3://experimental-programmatic-access-ccft-multipayer-sar/883a4fece3f4531273c6f1ed39154eed
      Handler: check-first-invocation.lambda_handler
      Policies:
      - S3ReadPolicy:
          BucketName:
            Ref: CarbonEmissionsDataBucket
      - Statement:
        - Sid: ListAccounts
          Effect: Allow
          Action:
          - organizations:ListAccounts
          Resource: '*'
        - Sid: DescribeOrganization
          Effect: Allow
          Action:
          - organizations:DescribeOrganization
          Resource: '*'
      Runtime: python3.11
      Architectures:
      - arm64
      Environment:
        Variables:
          bucketName:
            Ref: CarbonEmissionsDataBucket
      Timeout: 20
    Metadata:
      SamResourceId: CheckFirstInvocationFunction
  CheckFirstInvocationFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${CheckFirstInvocationFunction}
      RetentionInDays: 1
    Metadata:
      SamResourceId: CheckFirstInvocationFunctionLogGroup
  BackfillDataFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: backfill-data
      CodeUri: s3://experimental-programmatic-access-ccft-multipayer-sar/38011d509dfbfc0e130f73957e69b046
      Handler: backfill-data.lambda_handler
      Policies:
      - Statement:
        - Sid: GetCarbonFootprintSummary
          Effect: Allow
          Action:
          - sustainability:GetCarbonFootprintSummary
          Resource: '*'
        - Sid: S3WritePolicy
          Effect: Allow
          Action:
          - s3:PutObject
          Resource:
            Fn::Sub: ${CarbonEmissionsDataBucket.Arn}/*
        - Sid: STSAssumeRole
          Effect: Allow
          Action:
          - sts:AssumeRole
          Resource: '*'
      Runtime: python3.11
      Architectures:
      - arm64
      Environment:
        Variables:
          bucketName:
            Ref: CarbonEmissionsDataBucket
          ccftRole:
            Ref: CCFTRoleName
          fileName:
            Ref: CarbonEmissionsDataFileName
      Timeout: 20
    Metadata:
      SamResourceId: BackfillDataFunction
  BackfillDateFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${BackfillDataFunction}
      RetentionInDays: 1
    Metadata:
      SamResourceId: BackfillDateFunctionLogGroup
  ExtractCarbonEmissionsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: extract-carbon-emissions-data
      CodeUri: s3://experimental-programmatic-access-ccft-multipayer-sar/aa17722e8df94d8c5eff58598dabc195
      Handler: ccft-access-lambda.lambda_handler
      Policies:
      - Statement:
        - Sid: GetCarbonFootprintSummary
          Effect: Allow
          Action:
          - sustainability:GetCarbonFootprintSummary
          Resource: '*'
        - Sid: S3WritePolicy
          Effect: Allow
          Action:
          - s3:PutObject
          Resource:
            Fn::Sub: ${CarbonEmissionsDataBucket.Arn}/*
        - Sid: STSAssumeRole
          Effect: Allow
          Action:
          - sts:AssumeRole
          Resource: '*'
      Runtime: python3.11
      Architectures:
      - arm64
      Environment:
        Variables:
          bucketName:
            Ref: CarbonEmissionsDataBucket
          ccftRole:
            Ref: CCFTRoleName
          fileName:
            Ref: CarbonEmissionsDataFileName
      Timeout: 20
    Metadata:
      SamResourceId: ExtractCarbonEmissionsFunction
  ExtractCarbonEmissionsFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${ExtractCarbonEmissionsFunction}
      RetentionInDays: 1
    Metadata:
      SamResourceId: ExtractCarbonEmissionsFunctionLogGroup
  CreateAlterAthenaViewFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: create-alter-athena-view
      CodeUri: s3://experimental-programmatic-access-ccft-multipayer-sar/07c645ffc98325007a012a1a29512aa9
      Handler: create-alter-athena-view.lambda_handler
      Policies:
      - Statement:
        - Sid: Athena
          Effect: Allow
          Action:
          - athena:StartQueryExecution
          - athena:StartQueryExecution
          - athena:GetQueryResults
          - athena:GetWorkGroup
          - athena:StopQueryExecution
          - athena:GetQueryExecution
          - glue:CreateDatabase
          - glue:GetDatabase
          - glue:CreateTable
          - glue:UpdateTable
          - glue:GetTable
          Resource:
          - Fn::Sub: arn:aws:athena:${AWS::Region}:${AWS::AccountId}:workgroup/*
          - Fn::Sub: arn:aws:glue:${AWS::Region}:${AWS::AccountId}:catalog
          - Fn::Sub: arn:aws:glue:${AWS::Region}:${AWS::AccountId}:database/${GlueDatabaseName}
          - Fn::Sub: arn:aws:glue:${AWS::Region}:${AWS::AccountId}:table/${GlueDatabaseName}/*
        - Sid: S3Allow
          Effect: Allow
          Action:
          - s3:*
          Resource:
          - Fn::Sub: ${CarbonEmissionsDataBucket.Arn}/*
          - Fn::Sub: ${AthenaResultBucket.Arn}
          - Fn::Sub: ${AthenaResultBucket.Arn}/*
      Runtime: python3.11
      Architectures:
      - arm64
      Environment:
        Variables:
          emissionsBucketName:
            Ref: CarbonEmissionsDataBucket
          athenaBucketName:
            Ref: AthenaResultBucket
          glueDatabaseName:
            Ref: GlueDatabaseName
    Metadata:
      SamResourceId: CreateAlterAthenaViewFunction
